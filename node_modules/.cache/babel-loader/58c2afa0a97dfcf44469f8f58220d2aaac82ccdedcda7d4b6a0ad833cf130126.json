{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cesar\\\\Development\\\\Projects\\\\Web_IQGeoSpatial\\\\src\\\\hooks\\\\useAuth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect, createContext, useContext } from 'react';\nimport { supabase } from '../utils/supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [session, setSession] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Función para obtener el perfil del usuario\n  const getProfile = async user => {\n    if (!user) return null;\n    const {\n      data,\n      error\n    } = await supabase.from('profiles').select('*').eq('id', user.id).single();\n    if (error) {\n      console.error('Error fetching profile:', error);\n      return null;\n    }\n    return data;\n  };\n  useEffect(() => {\n    const bootstrapSession = async () => {\n      // Usamos try/finally para asegurarnos de que setLoading(false) se llame siempre.\n      try {\n        const {\n          data: {\n            session: currentSession\n          }\n        } = await supabase.auth.getSession();\n        setSession(currentSession);\n        if (currentSession) {\n          const userProfile = await getProfile(currentSession.user);\n          setProfile(userProfile);\n        }\n      } catch (e) {\n        console.error(\"Error al inicializar la sesión de autenticación:\", e);\n      } finally {\n        setLoading(false);\n      }\n    };\n    bootstrapSession();\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (_event, newSession) => {\n      setSession(newSession);\n      // Cuando el estado cambia (login/logout), también actualizamos el perfil.\n      const userProfile = newSession ? await getProfile(newSession.user) : null;\n      setProfile(userProfile);\n      setLoading(false); // Aseguramos que la carga termine aquí también.\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  const value = {\n    session,\n    profile,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"2PwuXsbjoKdj5teh7kEvBd7NSbE=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["useState","useEffect","createContext","useContext","supabase","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","session","setSession","profile","setProfile","loading","setLoading","getProfile","user","data","error","from","select","eq","id","single","console","bootstrapSession","currentSession","auth","getSession","userProfile","e","subscription","onAuthStateChange","_event","newSession","unsubscribe","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","undefined","Error","$RefreshReg$"],"sources":["C:/Users/cesar/Development/Projects/Web_IQGeoSpatial/src/hooks/useAuth.js"],"sourcesContent":["import { useState, useEffect, createContext, useContext } from 'react';\r\nimport { supabase } from '../utils/supabaseClient';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [session, setSession] = useState(null);\r\n  const [profile, setProfile] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Función para obtener el perfil del usuario\r\n  const getProfile = async (user) => {\r\n    if (!user) return null;\r\n    const { data, error } = await supabase\r\n      .from('profiles')\r\n      .select('*')\r\n      .eq('id', user.id)\r\n      .single();\r\n    if (error) {\r\n      console.error('Error fetching profile:', error);\r\n      return null;\r\n    }\r\n    return data;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const bootstrapSession = async () => {\r\n      // Usamos try/finally para asegurarnos de que setLoading(false) se llame siempre.\r\n      try {\r\n        const { data: { session: currentSession } } = await supabase.auth.getSession();\r\n        setSession(currentSession);\r\n        if (currentSession) {\r\n          const userProfile = await getProfile(currentSession.user);\r\n          setProfile(userProfile);\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error al inicializar la sesión de autenticación:\", e);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    bootstrapSession();\r\n\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (_event, newSession) => {\r\n      setSession(newSession);\r\n      // Cuando el estado cambia (login/logout), también actualizamos el perfil.\r\n      const userProfile = newSession ? await getProfile(newSession.user) : null;\r\n      setProfile(userProfile);\r\n      setLoading(false); // Aseguramos que la carga termine aquí también.\r\n    });\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, []);\r\n\r\n  const value = { session, profile, loading };\r\n\r\n  return <AuthContext.Provider value={value}>{!loading && children}</AuthContext.Provider>;\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}